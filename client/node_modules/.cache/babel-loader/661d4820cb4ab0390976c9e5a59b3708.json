{"ast":null,"code":"import { takeLatest, put, all, call } from \"@redux-saga/core/effects\";\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure } from \"./user.action\";\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(emailSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(emailSignInFailure(error));\n  }\n}\nexport function* emailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(emailSignInStart)]);\n}","map":{"version":3,"sources":["C:/Users/hemanth/Desktop/e-commerce/crwn-clothing/src/redux/user/user-sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","googleSignInSuccess","googleSignInFailure","emailSignInSuccess","emailSignInFailure","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","id","data","error","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","emailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","isUserAuthenticated","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAAyBC,GAAzB,EAA8BC,IAA9B,QAA2C,0BAA3C;AAEA,OAAQC,eAAR,MAA6B,cAA7B;AACA,SAASC,IAAT,EAAeC,cAAf,EAAgCC,yBAAhC,QAAgE,+BAAhE;AAEA,SAASC,mBAAT,EAA6BC,mBAA7B,EAAiDC,kBAAjD,EAAoEC,kBAApE,QAA8F,eAA9F;AAEA,OAAO,UAAUC,gBAAV,GAA4B;AAC/B,MAAG;AAEC,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,IAAI,CAACS,eAAL,CAAqBR,cAArB,CAAvB;AACA,UAAMS,OAAO,GAAI,MAAMZ,IAAI,CAACI,yBAAD,EAA4BM,IAA5B,CAA3B;AAEA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMhB,GAAG,CAACO,mBAAmB,CAAC;AAACU,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAlB;AAAsB,SAAGF,YAAY,CAACG,IAAb;AAAzB,KAAD,CAApB,CAAT;AAEC,GARL,CAQM,OAAOC,KAAP,EAAa;AACX,UAAMnB,GAAG,CAACQ,mBAAmB,CAACW,KAAD,CAApB,CAAT;AAEP;AACJ;AAED,OAAO,UAAUC,mBAAV,GAA+B;AAClC,QAAMrB,UAAU,CAACI,eAAe,CAACkB,oBAAjB,EAAsCV,gBAAtC,CAAhB;AAEH;AAED,OAAO,UAAUW,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAC;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP;AAAT,CAA1B,EAAqD;AACxD,MAAG;AACC,UAAM;AAAEb,MAAAA;AAAF,QAAW,MAAMR,IAAI,CAACsB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMX,OAAO,GAAI,MAAMZ,IAAI,CAACI,yBAAD,EAA4BM,IAA5B,CAA3B;AAEA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMhB,GAAG,CAACS,kBAAkB,CAAC;AAACQ,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAlB;AAAsB,SAAGF,YAAY,CAACG,IAAb;AAAzB,KAAD,CAAnB,CAAT;AAGH,GARD,CAQC,OAAMC,KAAN,EAAY;AACT,UAAMnB,GAAG,CAACU,kBAAkB,CAACS,KAAD,CAAnB,CAAT;AACH;AAGJ;AAED,OAAO,UAAUQ,gBAAV,GAA4B;AAC/B,QAAM5B,UAAU,CAACI,eAAe,CAACyB,mBAAjB,EAAqCN,eAArC,CAAhB;AACH;AAED,OAAO,UAAUO,kBAAV,GAA8B;AACjC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,kBAAjB,EAAqCC,mBAArC,CAAhB;AAEH;AAGD,OAAO,UAAUC,SAAV,GAAqB;AACxB,QAAM/B,GAAG,CAAC,CAACC,IAAI,CAACkB,mBAAD,CAAL,EAA2BlB,IAAI,CAACyB,gBAAD,CAA/B,CAAD,CAAT;AACH","sourcesContent":["import { takeLatest, put,all ,call  } from \"@redux-saga/core/effects\";\r\n\r\nimport  UserActionTypes from './user.types';\r\nimport { auth, googleProvider , createUserProfileDocument} from '../../firebase/firebase.utils';\r\n\r\nimport { googleSignInSuccess,googleSignInFailure,emailSignInSuccess,emailSignInFailure } from \"./user.action\";\r\n\r\nexport function* signInWithGoogle(){\r\n    try{\r\n\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n        const userRef =  yield call(createUserProfileDocument, user);\r\n\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(googleSignInSuccess({id: userSnapshot.id, ...userSnapshot.data()}))\r\n\r\n        } catch (error){\r\n            yield put(googleSignInFailure(error));\r\n\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart(){\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle)\r\n\r\n}\r\n\r\nexport function* signInWithEmail({payload:{email,password}}){\r\n    try{\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        const userRef =  yield call(createUserProfileDocument, user);\r\n\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(emailSignInSuccess({id: userSnapshot.id, ...userSnapshot.data()}))\r\n\r\n\r\n    }catch(error){\r\n        yield put(emailSignInFailure(error))\r\n    }\r\n\r\n\r\n}\r\n\r\nexport function* emailSignInStart(){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail)\r\n}\r\n\r\nexport function* onCheckUserSession(){\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n\r\n}\r\n\r\n\r\nexport function* userSagas(){\r\n    yield all([call(onGoogleSignInStart),call(emailSignInStart)])\r\n}"]},"metadata":{},"sourceType":"module"}