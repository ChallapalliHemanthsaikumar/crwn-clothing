{"ast":null,"code":"import { takeLatest, put, all, call } from \"@redux-saga/core/effects\";\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure, signoutSuccess, signoutFailure, signUpSuccess, signUpFailure } from \"./user.action\";\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  try {\n    const userRef = yield call(createUserProfileDocument, user, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(emailSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(emailSignInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(emailSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(emailSignInFailure(error));\n  }\n}\nexport function* emailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutstart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signoutSuccess());\n  } catch (err) {\n    yield put(signoutFailure());\n  }\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(emailSignInStart), call(onCheckUserSession), call(onSignOutstart), call(onSignUpStart)], call(onSignUpSuccess));\n}","map":{"version":3,"sources":["C:/Users/hemanth/Desktop/e-commerce/crwn-clothing/src/redux/user/user-sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","googleSignInSuccess","googleSignInFailure","emailSignInSuccess","emailSignInFailure","signoutSuccess","signoutFailure","signUpSuccess","signUpFailure","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","id","data","error","signUp","payload","email","password","displayName","createUserWithEmailAndPassword","additionalData","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","isUserAuthenticated","userAuth","signInWithEmail","signInWithEmailAndPassword","emailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutstart","SIGN_OUT_START","signOut","err","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put,all ,call  } from \"@redux-saga/core/effects\";\r\n\r\nimport  UserActionTypes from './user.types';\r\nimport { auth, googleProvider , createUserProfileDocument,getCurrentUser} from '../../firebase/firebase.utils';\r\n\r\nimport { googleSignInSuccess,googleSignInFailure,emailSignInSuccess,emailSignInFailure,signoutSuccess,signoutFailure,signUpSuccess,signUpFailure } from \"./user.action\";\r\n\r\nexport function* signInWithGoogle(){\r\n    try{\r\n\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n        const userRef =  yield call(createUserProfileDocument, user);\r\n\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(googleSignInSuccess({id: userSnapshot.id, ...userSnapshot.data()}))\r\n\r\n        } catch (error){\r\n            yield put(googleSignInFailure(error));\r\n\r\n    }\r\n}\r\n\r\nexport function*  signUp({payload: {email,password,displayName}}){\r\n    try{\r\n        const {  user } = yield auth.createUserWithEmailAndPassword(\r\n            email,\r\n            password\r\n        );\r\n        yield put(signUpSuccess({user,additionalData:{displayName}}))\r\n    }catch(error){\r\n       yield  put(signUpFailure(error))\r\n\r\n    }\r\n}\r\n\r\nexport function* signInAfterSignUp({payload:{user,additionalData}}){\r\n    try{\r\n        \r\n        const userRef =  yield call(createUserProfileDocument, user,additionalData);\r\n\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(emailSignInSuccess({id: userSnapshot.id, ...userSnapshot.data()}))\r\n\r\n    }catch(error){\r\n        yield put(signUpFailure(error))\r\n    }\r\n\r\n}\r\n\r\nexport function* onGoogleSignInStart(){\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle)\r\n\r\n}\r\n\r\n\r\nexport function* isUserAuthenticated(){\r\n    try{\r\n        const userAuth = yield getCurrentUser();\r\n        if(!userAuth) return;\r\n        const userRef =  yield call(createUserProfileDocument, userAuth);\r\n\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(googleSignInSuccess({id: userSnapshot.id, ...userSnapshot.data()}))\r\n\r\n    }catch(error){\r\n        yield put(emailSignInFailure(error));\r\n\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail({payload:{email,password}}){\r\n    try{\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        const userRef =  yield call(createUserProfileDocument, user);\r\n\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(emailSignInSuccess({id: userSnapshot.id, ...userSnapshot.data()}))\r\n\r\n\r\n    }catch(error){\r\n        yield put(emailSignInFailure(error))\r\n    }\r\n\r\n\r\n}\r\n\r\nexport function* emailSignInStart(){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail)\r\n}\r\n\r\nexport function* onCheckUserSession(){\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n\r\n}\r\n\r\nexport function* onSignOutstart() {\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\r\n}\r\n\r\nexport function*  signOut() {\r\n    try{\r\n        yield auth.signOut();\r\n        yield (put(signoutSuccess()))\r\n    }catch(err){\r\n        yield put(signoutFailure());\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function* onSignUpStart(){\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp)\r\n}\r\n\r\nexport function* onSignUpSuccess(){\r\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp)\r\n}\r\n\r\nexport function* userSagas(){\r\n    yield all([call(onGoogleSignInStart),call(emailSignInStart),call(onCheckUserSession),call(onSignOutstart),call(onSignUpStart)],call(onSignUpSuccess));\r\n}"]},"metadata":{},"sourceType":"module"}