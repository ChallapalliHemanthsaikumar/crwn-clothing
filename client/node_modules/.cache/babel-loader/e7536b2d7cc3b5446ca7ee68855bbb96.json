{"ast":null,"code":"import { takeLatest, call, put, all } from \"@redux-saga/core/effects\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport ShopActionTypes from \"./shop.types\";\nimport { fetchCollectionSuccess, fetchCollectionsFailure } from './shop.actions';\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionSuccess(collectionMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  } //    collectionRef.get().then(snapshot=> {\n  //        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //        dispatch(fetchCollectionSuccess(collectionsMap));\n  //    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n;\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart())]);\n}\n;","map":{"version":3,"sources":["C:/Users/hemanth/Desktop/e-commerce/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","firestore","convertCollectionsSnapshotToMap","ShopActionTypes","fetchCollectionSuccess","fetchCollectionsFailure","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAASA,UAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA8BC,GAA9B,QAAyC,0BAAzC;AAEA,SAASC,SAAT,EAAmBC,+BAAnB,QAA0D,+BAA1D;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SACIC,sBADJ,EAEIC,uBAFJ,QAGO,gBAHP;AAOA,OAAO,UAAUC,qBAAV,GAAiC;AAErC,MAAG;AAGH,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AAEA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AAEA,UAAMC,aAAa,GAAG,MAAMb,IAAI,CAACI,+BAAD,EAAiCO,QAAjC,CAAhC;AACA,UAAMV,GAAG,CAACK,sBAAsB,CAACO,aAAD,CAAvB,CAAT;AACC,GATD,CASC,OAAMC,KAAN,EAAY;AACZ,UAAMb,GAAG,CAACM,uBAAuB,CAACO,KAAK,CAACC,OAAP,CAAxB,CAAT;AACA,GAboC,CAexC;AACA;AACA;AAEA;;AACC;AAED,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMjB,UAAU,CAACM,eAAe,CAACY,uBAAjB,EAChBT,qBADgB,CAAhB;AAEH;AAAA;AAED,OAAO,UAAUU,SAAV,GAAqB;AACxB,QAAMhB,GAAG,CAAC,CAACF,IAAI,CAACgB,qBAAqB,EAAtB,CAAL,CAAD,CAAT;AACH;AAAA","sourcesContent":["import { takeLatest,call, put,all } from \"@redux-saga/core/effects\";\r\n\r\nimport { firestore,convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\r\nimport ShopActionTypes from \"./shop.types\";\r\n\r\nimport {\r\n    fetchCollectionSuccess,\r\n    fetchCollectionsFailure\r\n} from './shop.actions';\r\n\r\n\r\n\r\nexport function* fetchCollectionsAsync(){\r\n  \r\n   try{\r\n\r\n   \r\n   const collectionRef = firestore.collection('collections');\r\n\r\n   const snapshot = yield collectionRef.get();\r\n    \r\n   const collectionMap = yield call(convertCollectionsSnapshotToMap,snapshot);\r\n   yield put(fetchCollectionSuccess(collectionMap));\r\n   }catch(error){\r\n    yield put(fetchCollectionsFailure(error.message))\r\n   }\r\n\r\n//    collectionRef.get().then(snapshot=> {\r\n//        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n//        dispatch(fetchCollectionSuccess(collectionsMap));\r\n       \r\n//    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n}\r\n\r\nexport function* fetchCollectionsStart(){\r\n    yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START,\r\n    fetchCollectionsAsync)\r\n};\r\n\r\nexport function* shopSagas(){\r\n    yield all([call(fetchCollectionsStart())])\r\n};"]},"metadata":{},"sourceType":"module"}