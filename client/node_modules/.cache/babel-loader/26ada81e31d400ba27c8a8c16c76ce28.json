{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCQpP-hLdDRjJSAhEx_Ggwl9YtEz-CeHIs\",\n  authDomain: \"crwn-db-5fe41.firebaseapp.com\",\n  projectId: \"crwn-db-5fe41\",\n  storageBucket: \"crwn-db-5fe41.appspot.com\",\n  messagingSenderId: \"766052386726\",\n  appId: \"1:766052386726:web:5aff1239bee2e56b1ab167\",\n  measurementId: \"G-391Z8EMY3B\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection('users');\n  const snapShot = await userRef.get();\n  const collectionSnapshot = await collectionRef.get();\n  console.log({\n    collection: collectionSnapshot.docs.map(doc => doc.data())\n  });\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformCollection.reduce((accumlator, collection) => {\n    accumlator[collection.title.toLowerCase()] = collection;\n    return accumlator;\n  }, {});\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/hemanth/Desktop/e-commerce/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","snapShot","get","collectionSnapshot","console","log","docs","map","data","exists","displayName","email","createdAt","Date","set","error","message","initializeApp","convertCollectionsSnapshotToMap","collections","transformCollection","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumlator","auth","addCollectionAndDocuments","collectionKey","objectsToAdd","batch","forEach","obj","newDocRef","commit","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    \r\n    apiKey: \"AIzaSyCQpP-hLdDRjJSAhEx_Ggwl9YtEz-CeHIs\",\r\n    authDomain: \"crwn-db-5fe41.firebaseapp.com\",\r\n    projectId: \"crwn-db-5fe41\",\r\n    storageBucket: \"crwn-db-5fe41.appspot.com\",\r\n    messagingSenderId: \"766052386726\",\r\n    appId: \"1:766052386726:web:5aff1239bee2e56b1ab167\",\r\n    measurementId: \"G-391Z8EMY3B\"\r\n};\r\n\r\nexport const createUserProfileDocument = async(userAuth, additionalData) => {\r\n    if(!userAuth) return;\r\n    \r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    const collectionRef = firestore.collection('users');\r\n    const snapShot = await userRef.get();\r\n    const collectionSnapshot = await collectionRef.get();\r\n    console.log({ collection: collectionSnapshot.docs.map(doc => doc.data())});\r\n\r\n  \r\n\r\n    if(!snapShot.exists){\r\n        const { displayName, email} = userAuth;\r\n        const createdAt = new Date();\r\n\r\n        try {\r\n            \r\n        await userRef.set({\r\n            displayName,\r\n            email,\r\n            createdAt,\r\n            ...additionalData\r\n\r\n        })}\r\n        catch (error){\r\n            console.log(\"error creating user\",error.message);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return userRef;\r\n\r\n}\r\n\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n    const transformCollection = collections.docs.map(doc => {\r\n        const { title, items } = doc.data();\r\n\r\n        return {\r\n            routeName: encodeURI(title.toLowerCase()),\r\n            id: doc.id,\r\n            title,\r\n            items    }\r\n    });\r\n    return transformCollection.reduce((accumlator, collection) => {\r\n        accumlator[collection.title.toLowerCase()] = collection;\r\n        return accumlator;\r\n\r\n    },{});\r\n}\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const addCollectionAndDocuments = async(collectionKey, objectsToAdd) => {\r\n    const collectionRef = firestore.collection(collectionKey);\r\n    console.log(collectionRef);\r\n    const batch = firestore.batch();\r\n    objectsToAdd.forEach(obj => {\r\n  \r\n        const newDocRef = collectionRef.doc();\r\n        batch.set(newDocRef, obj);\r\n\r\n    });\r\n     return await batch.commit();\r\n};\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({prompt:'select_account'});\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}